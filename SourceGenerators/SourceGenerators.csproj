<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
	<TargetFramework>netstandard2.0</TargetFramework>
	<LangVersion>11</LangVersion>
	<EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
  </PropertyGroup>

  <ItemGroup>
	<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.11.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.11.0" />
  </ItemGroup>

  <!-- Making external packages work requires some set up depending on what is needed. 
  Depending on if the package is required for making the generator work or if it's used in the generated code.
  The offical docs cover some of it but also doesn't work fully: https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.cookbook.md#use-functionality-from-nuget-packages
  Combined with the following it does seem to work: https://stackoverflow.com/a/72200779 -->
  <PropertyGroup>
	<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
	<GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
  </PropertyGroup>

  <ItemGroup>
	<!-- Take a private dependency on Newtonsoft.Json (PrivateAssets=all) Consumers of this generator will not reference it.
    Set GeneratePathProperty=true so we can reference the binaries via the PKGSystem_Text_Json property -->	
	<PackageReference Include="Newtonsoft.Json" Version="13.0.3" PrivateAssets="all" GeneratePathProperty="true" />
  </ItemGroup>

  <Target Name="GetDependencyTargetPaths">
	<ItemGroup>
	  <TargetPathWithTargetPlatformMoniker Include="$(PkgNewtonsoft_Json)\lib\netstandard2.0\*.dll" IncludeRuntimeDependency="false" />
	</ItemGroup>
  </Target>

</Project>
